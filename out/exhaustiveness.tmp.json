{"StandardToken":{"hash":"ce36e2908e916927453155100e90444b03e3d2fbd73adfff6e835961a2a1e9cc","name":"StandardToken__exhaustiveness","spec":"requires \"../rules.k\"\nrequires \"../bin_runtime.k\"\n\nmodule CE36E2908E916927453155100E90444B03E3D2FBD73ADFFF6E835961A2A1E9CC\n  imports ETHEREUM-SIMULATION\n  imports EVM\n  imports RULES\n  imports BIN_RUNTIME\n\n// StandardToken__exhaustiveness\nrule [StandardToken..exhaustiveness]:\n  <k> #execute ~> CONTINUATION => #halt ~> CONTINUATION </k>\n  <exit-code> 1 </exit-code>\n  <mode> NORMAL </mode>\n  <schedule> PETERSBURG </schedule>\n  <ethereum>\n    <evm>\n      <output> _ => VOutput </output>\n      <statusCode> _ => EVMC_REVERT_NETWORK </statusCode>\n      <callStack> VCallStack </callStack>\n      <interimStates> _ </interimStates>\n      <touchedAccounts> _ => _ </touchedAccounts>\n      <callState>\n        <program> #asMapOpCodes(#dasmOpCodes(StandardToken_bin_runtime, PETERSBURG)) </program>\n        <programBytes> StandardToken_bin_runtime </programBytes>\n        <id> ACCT_ID </id>\n        <caller> CALLER_ID </caller>\n        <callData> VCallData </callData>\n        <callValue> VCallValue </callValue>\n        <wordStack> .WordStack => _ </wordStack>\n        <localMem> .Map => _ </localMem>\n        <pc> 0 => _ </pc>\n        <gas> VGas => _ </gas>\n        <memoryUsed> 0 => _ </memoryUsed>\n        <callGas> _ => _ </callGas>\n        <static> _ </static>\n        <callDepth> VCallDepth </callDepth>\n      </callState>\n      <substate>\n        <selfDestruct> VSelfDestruct </selfDestruct>\n        <log> _ => VLog </log>\n        <refund> _ => VRefund </refund>\n      </substate>\n      <gasPrice> _ </gasPrice>\n      <origin> ORIGIN_ID </origin>\n      <previousHash> _ </previousHash>\n      <ommersHash> _ </ommersHash>\n      <coinbase> _ </coinbase>\n      <stateRoot> _ </stateRoot>\n      <transactionsRoot> _ </transactionsRoot>\n      <receiptsRoot> _ </receiptsRoot>\n      <logsBloom> _ </logsBloom>\n      <difficulty> _ </difficulty>\n      <number> _ </number>\n      <gasLimit> _ </gasLimit>\n      <gasUsed> _ </gasUsed>\n      <timestamp> TIME </timestamp>\n      <extraData> _ </extraData>\n      <mixHash> _ </mixHash>\n      <blockNonce> _ </blockNonce>\n      <ommerBlockHeaders> _ </ommerBlockHeaders>\n      <blockhash> _ </blockhash>\n    </evm>\n    <network>\n      <activeAccounts> VActiveAccounts </activeAccounts>\n      <accounts> _ </accounts>\n      <txOrder> _ </txOrder>\n      <txPending> _ </txPending>\n      <messages> _ </messages>\n    </network>\n  </ethereum>\nrequires #rangeAddress(ACCT_ID)\nandBool #notPrecompileAddress(ACCT_ID)\nandBool #rangeAddress(CALLER_ID)\nandBool #rangeAddress(ORIGIN_ID)\nandBool #rangeUInt(256, TIME)\nandBool #rangeUInt(256, ACCT_ID_balance)\nandBool #rangeUInt(256, ECREC_BAL)\nandBool #rangeUInt(256, SHA256_BAL)\nandBool #rangeUInt(256, RIP160_BAL)\nandBool #rangeUInt(256, ID_BAL)\nandBool #rangeUInt(256, MODEXP_BAL)\nandBool #rangeUInt(256, ECADD_BAL)\nandBool #rangeUInt(256, ECMUL_BAL)\nandBool #rangeUInt(256, ECPAIRING_BAL)\nandBool VCallDepth <=Int 1024\nandBool #rangeUInt(256, VCallValue)\nandBool 157198259 =/=Int chop(#asWord(#take(4, #take(32, VCallData))))\nandBool 404098525 =/=Int chop(#asWord(#take(4, #take(32, VCallData))))\nandBool 599290589 =/=Int chop(#asWord(#take(4, #take(32, VCallData))))\nandBool 1889567281 =/=Int chop(#asWord(#take(4, #take(32, VCallData))))\nandBool 2835717307 =/=Int chop(#asWord(#take(4, #take(32, VCallData))))\nandBool 3714247998 =/=Int chop(#asWord(#take(4, #take(32, VCallData))))andBool VGas >=Int 40000000 \n\nendmodule\n","status":"????"}}